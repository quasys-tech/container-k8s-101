ip netns add red
ip netns add blue
ip netns

ip link
ip netns exec red ip link

arp
ip netns exec red arp

#Adding vint
ip link add veth-red type veth peer name veth-blue
ip link set veth-red netns red
ip link set veth-blue netns blue


ip -n red addr add 192.168.1.1/24 dev veth-red
ip -n blue addr add 192.168.1.2/24 dev veth-blue

#Up veth interfaces
ip -n red link set veth-red up
ip -n blue link set veth-blue up

#check ping - arp
ip netns exec red ping 192.168.1.2
ip netns exec red arp
arp

#Add virtual-switch
ip link add v-net-0 type bridge
ip link set dev v-net-0 up

#Delete cable-connection between veth-red and veth-blue
ip -n red link del veth-red
ip netns exec red ip link
ip netns exec blue ip link


#Connect namespaces to the virtual sw
ip link add veth-red type veth peer name veth-red-br
ip link add veth-blue type veth peer name veth-blue-br

#Attach to netns
ip link set veth-red netns red
ip link set veth-red-br master v-net-0
ip link set veth-blue netns blue
ip link set veth-blue-br master v-net-0

#assign ip address
ip -n red addr add 192.168.1.1/24 dev veth-red
ip -n blue addr add 192.168.1.2/24 dev veth-blue

#UP
ip -n red link set veth-red up
ip -n blue link set veth-blue up
ip link set veth-red-br up
ip link set veth-blue-br up

#Add ip to v-net-0 on host
ip addr add 192.168.1.5/24 dev v-net-0



#If red and blue ip's can ping from host, but not red --> blue, set below kernel parameter.
#sysctl net.bridge.bridge-nf-call-iptables=0
#sysctl net.bridge.bridge-nf-call-ip6tables=0
#sysctl -w net.ipv4.ip_forward=1

#NAT
ip netns exec blue ip route add 192.168.10.0/24 via 192.168.1.5

ip netns exec blue ping 192.168.10.5

#try ping but failed.

#On Ubuntu host
iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -j MASQUERADE


